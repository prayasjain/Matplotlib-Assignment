import matplotlib.pyplot as plt
import numpy as np
class PolynomialSolver :
    def plot(self,li,l,u=0):
        def f(x) : #function to calculate value of a function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        plt.axis([-20,20,-20,20])

        plt.plot([float(x) for x in np.arange(-10.0,10.2,0.1)],[f(float(x)) for x in np.arange(-10.0,10.2,0.1)],'r-')
        plt.plot([0,0],[-40,40],'k-',[-40,40],[0,0],'k-')
        plt.annotate("$x-axis$",xy=(8,-2),xytext=(8,-1))
        plt.annotate("$y-axis$",xy=(-2,15),xytext=(-2,15))
        plt.annotate("$o$",xy=(-0.5,0),xytext=(-0.5,0))

    def BisectionSearch(self,li=[],n=0) :
        print("Enter lower bound of interval in which root lies")   #interval containing the root
        l=float(input())
        print("Enter upper bound of interval in which root lies")
        u=float(input())
        self.plot(li,l,u)

        def f(x) :     #calculating the value of function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;    
        i=0
        lis=[]
        q,q2=l,u
        interval=[q,q2]
        '''while q2>q :
            
            
            if(f(q)*f(q2)<=0) :
                interval=[q,q2]
                break ;
            elif (f(q)*f(-1*q2)<=0) :
                interval=[-1*q2,q]
                break ;
            q2=q2-1'''    
        while i<10000 :
            plt.plot([q],[f(q)],'c-o')
            plt.plot([q2],[f(q2)],'m-o')
            if(interval[1]-interval[0]<0.000001) :
                
                break ;
            m=(interval[0]+interval[1])/2
            if(f(m)*f(interval[0])<0) :    #Checking for IVP and deciding new interval
                interval=[interval[0],m]
                q2=m
            else :
                interval=[m,interval[1]]
                q=m
            i=i+1
        plt.plot([interval[0]],[f(interval[0])],'y-s')
        plt.show()
        return interval
    def secant(self,li,n) :
        print("Enter lower bound of interval in which root lies") #interval containing the root
        l=float(input())
        print("Enter upper bound of interval in which root lies")
        u=float(input())
        self.plot(li,l,u)
        def f(x) :          #calculating the value of function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        i=0
        x1=l
        x2=u
        x=0
        while i<10000000 :
           plt.plot([x1],[f(x1)],'c-o')
           plt.plot([x2],[f(x2)],'m-o')
           i=i+1
           x=x2-(x2-x1)*f(x2)/(f(x2)-f(x1)) #Applying secant formula
           if(abs(f(x))<0.00001) :
               break ;
           x1=x2
           x2=x
        plt.plot([x],[f(x)],'y-s')
        plt.show()
        return x ;    
    def secantrf(self,li,n) :

        print("Enter lower bound of interval in which root lies")   #interval containing the root
        l=float(input())
        print("Enter upper bound of interval in which root lies")
        u=float(input())
        self.plot(li,l,u)
        def f(x) :  #calculating the value of function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        i=0
        x1=l
        x2=u
        plt.plot([l],[f(l)],'c-o')
        plt.plot([u],[f(u)],'m-o')
        x=0
        while i<10000000 :


           i=i+1
           x=x2-(x2-x1)*f(x2)/(f(x2)-f(x1))  #Applying secant regula falsi 
           if(abs(f(x))<0.00001) :
               break ;
           if(f(x2)*f(x1)<0) : 
               x2=x
           else : 
               x1=x
           plt.plot([x1],[f(x1)],'c-o')
           plt.plot([x2],[f(x2)],'m-o')
        plt.plot([x],[f(x)],'y-s')
        plt.show()
        return x ;
    def newton(self,li,n) :
        print("Enter approximate root") #approximate root from the user
        l=float(input())
        self.plot(li,l)
        def f(x) :   #calculating the value of function for a given x 
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        def fd(x) :  #calculating the value of derivative offunction for a given x
            s=0
            z=0
            for t in li :
                s=s+z*pow(x,z-1)*t
                z=z+1
            return s ;
        i=0
        
        x2=l
        x=0
        while i<10000000 :              #Taking max iterations as 10000000

           plt.plot([x2],[f(x2)],'m-o')
           i=i+1
           x=x2-f(x2)/fd(x2)            #Appyling newton raphson formula
           if(abs(f(x))<0.000001) :
               break ;
           x2=x
        plt.plot([x2],[f(x2)],'y-s')

        plt.show()
        return x ;

    def solve(self,n,L,method):
        if(method=='bisection'):
           return self.BisectionSearch(L,n)	
        if(method=='secant'):
           return self.secant(L,n)
        if(method=='secantRF'):
           return self.secantrf(L,n)	
        if(method=='newtonraphson'):
           return self.newton(L,n)	
        else:
           return NULL
ps=PolynomialSolver()
#print(ps.solve(3,[1,3,3,1],'bisection'))
#print(ps.BisectionSearch([-1,0,1],2))

            
        
