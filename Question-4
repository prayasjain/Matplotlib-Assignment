import matplotlib.pyplot as plt
import numpy as np
class Interpolate:

    def solve(self,L,M,method):
        if(method=="newton"):
            self.plot('newton',L,M,self.Newton(L,M))
            return (self.Newton(L,M))
        else:
            self.plot('Lagrange',L,M,self.Lagrange(L,M))
            return (self.Lagrange(L,M))

    def plot(self,method,l,m,li):
        def f(x) : #function to calculate value of a function for a given x
            s=0
            z=0
            for t in li :
                s=s+pow(x,z)*t
                z=z+1
            return s ;
        plt.axis([-20,20,-20,20])

        plt.plot([float(x) for x in np.arange(-10.0,10.2,0.1)],[f(float(x)) for x in np.arange(-10.0,10.2,0.1)],'r-')
        plt.plot([0,0],[-40,40],'k-',[-40,40],[0,0],'k-')
        plt.plot(l,m,'bo')
        plt.annotate("$x-axis$",xy=(8,-2),xytext=(8,-1))
        plt.annotate("$y-axis$",xy=(-2,15),xytext=(-2,15))
        plt.annotate("$o$",xy=(-0.5,0),xytext=(-0.5,0))
        plt.show()


    def Lagrange(self,L,M):                                                
       
        
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(L)                                                           
        w=(-1*L[0],1)                                                      
        for i in range(1,n):
            w=P.polymul(w,(-1*L[i],1))                                    
        result=array([0.0 for i in range(len(w)-1)])                    
        derivative=P.polyder(w)                                             
        for i in range(n):
            result+=(P.polydiv(w,(-1*L[i],1))[0]*M[i])/P.polyval(L[i],derivative)   
        return(list(result))                                                
    def Newton(self,L,M):                                                   
       
        
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(L)                                                            
        mat=[[0.0 for i in range(n)] for j in range(n)]                    
        for i in range(n):                                                 
            mat[i][0]=M[i]
        for i in range(1,n):                                               
            for j in range(n-i):
                mat[j][i]=(mat[j+1][i-1]-mat[j][i-1])/(L[j+i]-L[j])
        result=array((mat[0][0],))                                          
        for i in range(1,n):
            prod=(-1*L[0],1)                                               
                                                                            
            for j in range(1,i):
                prod=P.polymul(prod,(-1*L[j],1))                              
            result=P.polyadd(result,array(prod)*mat[0][i])                  
        return (list(result))                                               

apx=Interpolate()

for method in ["newton","lagrange"]:
    solution=apx.solve([1,2,3],[0,-1,0],method)
    print(solution)
